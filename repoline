#!/usr/bin/perl

use strict;
use warnings;
use utf8;

use Cwd qw/cwd/;
use File::Basename qw/basename dirname/;
use File::Path qw/mkpath/;

# TODO(sdh): Daemonize this so that we can have an async process always running
# to keep things up to date.  Then return very quickly with (potentially) partial
# information if the current info is stale [is there a way to watch a directory to
# invalidate our data as soon as it changes? e.g. when actively working in a repo,
# the immediate next prompt will often be wrong, but if we could detect the change
# as soon as it happens, we could possibly avoid showing the wrong data].

# Usage:

# repoline prompt  -- prints a prompt string
# Options (SUBJECT TO CHANGE):
#   --dirs=DIRS     - a colon-separate list of top-level dirs for repository
#   --fg=CODE       - use a fixed color instead.
#   --bg=CODE       - use a fixed color instead.
#   --notouch       - does not touch the color files or make new ones.
#   --columns=COL   - total number of columns.
#   --left=TEXT     - text for left bubble.
#   --right=TEXT    - text for right bubble.
#   --wprompt=TEXT  - text for prompt if in a simple directory
#   --rprompt=TEXT  - text for prompt if in a repo
#   --fill=STYLE    - style for fill (diag, box, flag, train, none)
#   --sep=STYLE     - separator (triangle, round, fire...)
#   --exit=CODE     - specify an exit code to go left of the left bubble.
#   # --pid=PID     - add pid of the shell to left bubble.
#  --ansiline=ARG   - add args to pass directly to ansiline (may be repeated)

# repoline colors  -- prints the current colors as "#fg:#bg"
# Options (SUBJECT TO CHANGE):
#   --dirs=DIRS     - a colon-separate list of top-level dirs for repository
#   --notouch       - does not touch the color files or make new ones.
#   --ansi          - return colors as ansi r;g;b numbers.
#   --path=PATH     - use the given path instead of pwd
#
# All options can be specified with environment variables using a REPO_ prefix
# and the name in all caps.

# repoline reset  -- resets the color for this repo

# TODO(sdh): Support multiple bubbles, percent-codes for e.g. user/host, date/time,
# dir, abbrev-dir (optional function to call to abbreviate?), repo status, etc
#  -- probably by adding a "%s" or something to break between them?
#  -- conditional bubbles?  e.g. %?{foo:bar:baz} ??? expand recursively?
#     -> will probably end up changing expand() to return an array?
#     in particular, condition on whether we're in a repo or not? maybe what kind?

# TODO(sdh): Option to print top line to STDERR instead (to minimize prompt)
#     -- currently broken - how to deal with this?!?
#     -- want to be able to both PRINT and set the PROMPT
#     -- maybe pass to EVAL???
# TODO(sdh): Option to print \[ and \] needed for bash to handle ansi properly?

# TODO(sdh): Allow registering custom handlers to get repo info for different
# types of repos?  Easy enough to call asynchronously...?

# TODO(sdh): handling of exit code is a hack, both in how we pass it and
# also in how it's inserted artificially into a bubble - we'd rather have
# an optional separator in the left bubble for it, if it's passed...

# CONFIG: use perl plugins?
# Need an API
#  * register_repo_type('hg', sub {})
#    - maybe use a full-on class for this?
#    - predicate would maybe return a blessed object w/ API?
#    - what about collisions? how to resolve? order dependence?
#    - could get an array of all matchers and then provide a separate
#      function to combine them together as needed?
#  * repo_info('hg', sub { ... })
#    - populates a hash with info about the repo
#    - may register multiple ones of these
#    - how to register as async?  spawns in separate process, stores results
#    - what about invalidation?
#  * something to actually render prompts? conditional on repo type?
#    resolution order...?

sub main {
  my $cmd = shift;
  if ($cmd eq 'prompt') {
    do_prompt(@_);
  } elsif ($cmd eq 'colors') {
    do_colors(@_);
  } elsif ($cmd eq 'print') {
    do_print(@_);
  } elsif ($cmd eq 'reset') {
    do_reset(@_);
  } else {
    die 'Usage: repoline prompt' unless $cmd eq 'prompt';
  }
}

sub help {
  # TODO(sdh): add a proper help page.
  print STDERR "@_\n";
  exit 1;
}

# Reads arguments, either from 
sub read_args {
  my $anon = 0;
  my %args = %{shift()};
  for my $key (keys %args) {
    next unless $key;
    my $env = uc "REPO_$key";
    $env =~ s/^--|:$//g;
    ${$args{$key}} = $ENV{$env} if defined $ENV{$env};
  }
  while ($_ = shift) {
    if (s/^--//) {
      if (defined $args{"$_:"}) {
        # TODO(sdh): consider allowing optional arg and not choking?
        ${$args{"$_:"}} = 1;
        next;
      }
      unshift @_, $1 if s/=(.*)$//;
      help("Unknown arg: --$_") unless defined $args{$_};
      if (ref $args{$_} eq 'ARRAY') {
        push @{$args{$_}}, shift;
      } elsif (ref $args{$_} eq 'SCALAR') {
        ${$args{$_}} = shift;
      } else {
        die "Bad type: " . ref $args{$_};
      }
    } else {
      help("Unknown arg: $_") unless $args{''};
      ++$anon;
      if (ref $args{''} eq 'ARRAY') {
        push @{$args{''}}, $_;
      } elsif (ref $args{''} eq 'SCALAR') {
        die "Too many positional params" unless $anon == 1;
        ${$args{''}} = $_;
      } else {
        die "Bad type: " . ref $args{''};
      }
    }
  }
}

my $repo_dirs = '.git:.hg:.citc';
# Returns a list of repo directory names that can appear in repo roots.
sub repo_dirs {
  # Default to .git and .hg, but can add more with environment variable.
  return split /:/, $repo_dirs;
}

my $root = undef;
# Finds the root of the current directory's repository.
sub root {
  return $root if defined $root;
  my $dir = $ENV{PWD}; # cwd();
  my @repo_dirs = repo_dirs();
  while (length $dir > 1) {
    for (@repo_dirs) {
      return ($root = $dir) if -e "$dir/$_";
    }
    $dir = dirname($dir);
  }
  return ($root = '');
}

sub repo_type {
  my $root = root();
  for (repo_dirs()) {
    return substr($_, 1) if -e "$root/$_";
  }
  return '';
}

# TODO(sdh): Add more fonts for fills
#   http://www.fontspace.com/category/patterns
#    - a number of options here
#   http://www.fontspace.com/agasilva/maya-tiles-promo
#    - would need to auto-download and merge with nerd font...
# Might be able to put together a little font for this...?

sub do_prompt {
  # Handle args
  my $notouch = 1;
  my $columns = 0;
  my $left = 'g!%u"@"%h';
  my $right = 'w!%t';
  my $wprompt = 'b!%W S(276f)r>y>g>0 '; # ❯
  my $rprompt = 'y!%r%b0 b!%Ry! S(276f)r>y>g>0 ';
  my $fill = 'NONE';
  my $flag_fg = '';
  my $flag_bg = '';
  my $sep = 'TRIANGLE';
  my $exit = 0;
  my @ansiline = ();
  #my $pid = 0;
  read_args {
      'notouch:' => \$notouch,
      columns => \$columns,
      left => \$left,
      right => \$right,
      wprompt => \$wprompt,
      rprompt => \$rprompt,
      fill => \$fill,
      fg => \$flag_fg,
      bg => \$flag_bg,
      sep => \$sep,
      dirs => \$repo_dirs,
      exit => \$exit,
      ansiline => \@ansiline,
      #pid => \$pid,
  }, @_;
  my $touch = $notouch;
  my $root = root();
  my $colors = $flag_fg && $flag_bg ? '' : find_colors($touch, $root);
  my ($bg, $fg, $ansi_bg, $ansi_fg) = split / /, $colors;
  $ansi_bg = $flag_bg if $flag_bg;
  $ansi_fg = $flag_fg if $flag_fg;

  my $prompt = expand($root ? $rprompt : $wprompt);
  $left = expand($left); # TODO(sdh): pass fg/bg/root/etc, to this?
  $right = expand($right);

  my %FILL = (
    DIAG => 'F(2571,2572,2573,20)',
    BOX => 'F(2596,2597,2598,2599,259a,259b,259c,259d,259e,259f)',
    FLAG => 'F(9776,9777,9778,9779,977a,977b,977c,977d)',
    TRAIN => 'F(#)',
    NONE => '',
  );
  die "No such fill: $fill" unless defined $FILL{uc $fill || 'NONE'};
  $fill = $FILL{uc $fill || 'NONE'};

  my %SEP = (
    TRIANGLE => 'S(e0b2,e0b0,e0b3,e0b1)',
    ROUND => 'S(e0b6,e0b4,e0b7,e0b5)',
    DOWN => 'S(e0be,e0b8)',
    UP => 'S(e0ba,e0bc)',
    SPLIT => 'S(e0d4,e0d2)',
    RSPLIT => 'S!(e0d2,e0d4)',
    FIRE => 'S(e0c2,e0c0)',
    DISSOLVE => 'S(e0c7,e0c6)', # smaller one (5,4) ugly at console font size
    AIRLINE => 'S(25c0,25b6)',
    NONE => 'S()',
  );
  die "No such separator: $sep" unless defined $SEP{uc $sep || 'TRIANGLE'};
  $sep = $SEP{uc $sep || 'TRIANGLE'};

  # TODO(sdh): include last exit code ?
  my $line;
  if ($ansi_bg eq '0') {
    $exit = $exit ? "(r\"$exit\"k)——" : '';
    $line = sprintf('F(—)!k"———%s("0%s!k")"*"("0%s!k")———"0|%s0',
		    $exit, $left, $right, $prompt);
  } else {
    $exit = $exit ? "r!\"$exit\" $bg< " : '';
    $exit =~ s/</"|"/ if length($sep) < 14;
    #$left = $pid ? "$left 0$fg> \"$pid\"" : $left;
    $line = sprintf('%s%s%s:%s  {:#000000 %s%s } * {:#000000 %s }  0|%s0',
		    $fill, $sep, $fg, $bg, $exit, $left, $right, $prompt);
  }
  my $ansiline = dirname($0) . '/ansiline';
  system $ansiline, '--npc', @ansiline, $line;
  # print $line;
}

# TODO - consider replacing this with print -F '%F:%B' or something?
sub do_colors {
  # Handle args
  my $touch = 1;
  my $get_fg = 1;
  my $get_bg = 1;
  my $ansi = 0;
  while ($_ = shift) {
    unshift @_, $1 if s/^--[^=]+\K=(.*)$//;
    $touch = 0, next if $_ eq '--notouch';
    $get_fg = 0, next if $_ eq '--bg';
    $get_bg = 0, next if $_ eq '--fg';
    $ansi = 1, next if $_ eq '--ansi';
    $repo_dirs = shift(), next if $_ eq '--dirs';
    $ENV{PWD} = shift(), next if $_ eq '--path';
    help(1);
  }
  my $root = root();
  my $colors = find_colors($touch, $root);
  my ($bg, $fg, $ansi_bg, $ansi_fg) = split / /, $colors;

  # Now print what was asked for.
  $fg = $ansi_fg if $ansi;
  $bg = $ansi_bg if $ansi;
  print $fg if $get_fg;
  print ":" if $get_fg and $get_bg;
  print $bg if $get_bg;
  print "\n";
  exit;
}

# Colors.
my @COLORS = (
  ['PaleVioletRed',	'#ff82ab', '#8b475d'],
  ['MediumOrchid',	'#e066ff', '#7a378b'],
  ['MediumPurple',	'#ab82ff', '#5d478b'],
  ['DodgerBlue',  	'#2090ff', '#104e8b'], # 2/256 more red
  ['SkyBlue',    	'#87ceff', '#4a708b'],
  ['turquoise', 	'#00f5ff', '#00868b'],
  ['aquamarine', 	'#7ffcd4', '#458b74'],
  ['green',     	'#04f900', '#008b00'],
  ['DarkOliveGreen', 	'#a2cd5a', '#6e8b3d'],
  ['gold',      	'#ffd700', '#8b7500'],
  ['burlywood', 	'#ffd39b', '#8b7355'],
  ['LightSalmon', 	'#ffa07a', '#8b5742'],
  ['DarkOrange',    	'#ff7f00', '#8b4500'],
  ['tomato',    	'#ff6347', '#8b3626'],
);

# Usage: find_colors $touch, $root
sub find_colors {
  # Find directory
  local $_;
  my ($touch, $root) = @_;
  # my $blank = '#000000 #666666 0 7';
  #my $blank = '#000000 #666666 ' . to_ansi('#666666') . ' ' . to_ansi('#000000'); #8;2;0;0;0 8;2;255;255;255';
  my $blank = '#666666 #000000 ' . to_ansi('#666666') . ' ' . to_ansi('#000000'); #8;2;0;0;0 8;2;255;255;255';
  return $blank unless $root;
  (my $root_scrubbed = $root) =~ s|/|!|g; # don't worry about collisions
  my $dir = $ENV{REPO_COLOR_DIR} || "$ENV{HOME}/.repo_colors";
  mkpath [$dir], 1, 0755 unless -d $dir;
  my $file = "$dir/$root_scrubbed";
  my $color;
  if (-e $file) {
    $color = read_file($file);
    system 'touch', $file;
  } else {
    return $blank unless $touch; # if --notouch then don'just return empty.
    # Make a new file, may need to expire older ones.
    opendir DIR, $dir;
    my @files = ();
    while ($_ = readdir DIR) {
      next if /^\.\.?/;
      push @files, ["$dir/$_", -C "$dir/$_"];
    }
    closedir DIR;
    @files = sort { $a->[1] <=> $b->[1] } @files;
    # Truncate down to 10
    while (@files > 10) {
      my $file = (pop @files)->[0];
      unlink "$file";
    }
    my @colors = map { read_file($_->[0]) } @files;
    $color = pick_color(@colors);
    open FILE, '>', $file or die "Could not open $file: $!";
    print FILE $color;
    close FILE;
  }
  # $color now holds an index into @COLORS
  my $bg = $COLORS[$color]->[1];
  my $fg = $COLORS[$color]->[2];
  my $ansi_bg = to_ansi($bg);
  my $ansi_fg = to_ansi($fg);
  return "$bg $fg $ansi_bg $ansi_fg";
}

sub to_ansi {
  local($_) = shift;
  s/^#//;
  my @parts = ('8;2');
  while (s/^(..)//) {
    push @parts, hex $1;
  }
  return join ';', @parts;
}

sub read_file {
  open FILE, '<', $_[0] or die "Could not open file $_[0]: $!";
  my $line = <FILE>;
  chomp $line;
  close FILE;
  return $line;
}

sub pick_color {
  # Ideally we would parse the colors, map to L*a*b* color space, and then
  # measure absolute differences.  But given the device-dependence of RGB,
  # this turns out to be ridiculously hard, so I won't bother.
  my @PENALTIES = (
    ['PaleVioletRed', 'MediumOrchid', 2],
    ['MediumOrchid', 'MediumPurple', 8],
    ['MediumPurple', 'DodgerBlue', 2],
    ['MediumPurple', 'SkyBlue', 1],
    ['DodgerBlue', 'SkyBlue', 1],
    ['SkyBlue', 'turquoise', 8],
    ['SkyBlue', 'aquamarine', 2],
    ['turquoise', 'aquamarine', 8],
    ['turquoise', 'green', 2],
    ['aquamarine', 'green', 8],
    ['aquamarine', 'DarkOliveGreen', 2],
    ['green', 'DarkOliveGreen', 2],
    ['DarkOliveGreen', 'gold', 2],
    ['gold', 'burlywood', 8],
    ['gold', 'LightSalmon', 1],
    ['burlywood', 'LightSalmon', 8],
    ['LightSalmon', 'DarkOrange', 4],
    ['LightSalmon', 'tomato', 2],
    ['DarkOrange', 'tomato', 8],
    ['LightSalmon', 'PaleVioletRed', 1],
    ['DarkOrange', 'PaleVioletRed', 4],
    ['tomato', 'PaleVioletRed', 4],
    ['tomato', 'MediumOrchid', 1],
  );
  my %COLORS = ();
  $COLORS{$_->[0]} = 1 for (@COLORS);
  my %PENALTIES = ();
  for (@PENALTIES) {
    my ($a, $b, $c) = @$_;
    die "Bad color: $a" unless defined $COLORS{$a};
    die "Bad color: $b" unless defined $COLORS{$b};
    $PENALTIES{"$a $b"} = $PENALTIES{"$b $a"} = $c;
  }

  # Iterate through all the not-picked colors
  my %options = ();
  $options{$_} = 0 for (1..$#COLORS);
  delete $options{$_} for (@_);
  my @costs = ();
  for (keys %options) {
    my $a = $COLORS[$_]->[0];
    my $cost = 0;
    my $multiplier = 1024;
    for my $x (@_) {
      my $b = $COLORS[$x]->[0];
      $cost += ($PENALTIES{"$a $b"} || 0) * $multiplier;
      $multiplier /= 2;
    }
    push @costs, [$_, $cost];
  }
  @costs = sort { $a->[1] <=> $b->[1] } @costs;
  return $costs[0]->[0];
}

sub do_print {
  # Handle args
  my $notouch = 1;
  my $fmt = '';
  read_args {
      'notouch:' => \$notouch,
      dirs => \$repo_dirs,
      '' => \$fmt,
  }, @_;
  my $touch = $notouch;
  my $root = root();
  #my $colors = $flag_fg && $flag_bg ? '' : find_colors($touch, $root);
  die "Expected format string" unless $fmt;
  print expand($fmt);
  exit;
}

# Expands prompt text.
sub expand {
  local($_) = shift;
  # TODO(sdh): support more args?
  $_ =~ s/%([uhHtWrRb%])/expand_char($1)/eg;
  return $_;
}

sub dq { "\"$_[0]\"" }

sub expand_char {
  local($_) = shift;
  return dq('%') if $_ eq '%';
  return dq($ENV{USER}) if $_ eq 'u';
  return dq(long_host()) if $_ eq 'H';
  return dq(short_host()) if $_ eq 'h';
  return dq(date_time()) if $_ eq 't';
  return dq(short_dir()) if $_ eq 'W';
  return dq(short_repo_dir()) if $_ eq 'R';
  return dq(short_repo_name()) if $_ eq 'r';
  return dq(short_repo_branch()) if $_ eq 'b';
  die "Bad escape: $_";
}

# TODO(sdh): Find a better way to branch these.

sub long_host {
  my $host = $ENV{HOST} || `hostname`;
  chomp $host;
  return $host;
}

sub short_host {
  my $host = long_host();
  $host =~ s/\..*//;
  return $host;
}

sub date_time {
  # TODO(sdh): Consider allowing custom format via env var?
  my $date = `date +'%a, %b %-d, %T'`;
  chomp $date;
  return $date;
}

sub short_dir {
  my $pwd = $ENV{PWD};
  $pwd =~ s/^$ENV{HOME}/~/;
  return $pwd;
}

sub short_repo_dir {
  # Figure out the repo root if there is one...
  my $root = root();
  my $pwd = $ENV{PWD};
  $pwd =~ s|$root?|#|;
  $pwd =~ s/^$ENV{HOME}/~/;
  return $pwd;
}

sub short_repo_name {
  # TODO - allow customizing a little?
  # TODO - use the type a little better?
  # TODO - maybe read environment var to get this (but emacs...?)
  my $root = root();
  my $name = basename($root);
  return $name unless $root;
  # Exception: if a directory is just a number, include the parent as well
  # (this is useful for git mirrors).
  $name = basename(dirname $root) . "/$name" if $name =~ /^\d+$/;
  my $type = repo_type();
  return $name if $type eq 'git';
  return "c:$name" if $type eq 'citc';
  return "$type:$name";
}

sub short_repo_branch {
  my $root = root();
  my $gitdir = "$root/.git";
  unless (-e $gitdir) {
    # git-g4 stores all gitdirs in ~/gitg4/*.git, so check that, too
    my $name = basename($root);
    $gitdir = "$ENV{HOME}/gitg4/$name.git";
  }
  if (-f "$gitdir") {
    open GIT, '<', $gitdir;
    local ($_) = <GIT>;
    close GIT;
    $gitdir = $1 if /gitdir: (.*)/ and -d $1;
  }
  if (-e "$gitdir/HEAD") {
    my $head = `cat $gitdir/HEAD`;
    if ($head =~ m|ref: refs/heads/(.*)|) {
      my $branch = ":$1";
      $head = `cat $gitdir/refs/heads/$1`;
      $branch = $branch . '(' . substr($head, 0, 7) . ')'
          if $head =~ /^[0-9a-f]+$/i;
      return $branch;
    } elsif ($head =~ /^[0-9a-f]+$/i) {
      return ':' . substr($head, 0, 7);
    }
    return '';
  }
  if (-e "$root/.hg") {
    # TODO - seems slower to get this, maybe read from env, get async?
    # TODO - CL numbers, etc?
  }
  return '';
}

sub do_reset {
  read_args {
      dirs => \$repo_dirs,
  }, @_;
  my $root = root();
  (my $root_scrubbed = $root) =~ s|/|!|g; # don't worry about collisions
  my $dir = $ENV{REPO_COLOR_DIR} || "$ENV{HOME}/.repo_colors";
  mkpath [$dir], 1, 0755 unless -d $dir;
  my $file = "$dir/$root_scrubbed";
  unlink $file;
}

# Just do it,
main(@ARGV);
